import java.util.ArrayList;
import java.util.HashMap;
import java.util.Scanner;
import java.util.Set;


public class ColorDatabase {

    private static HashMap map = new HashMap();
    static void init() {
    	map.put("apple", "red");
    	map.put("orange", "orange");
    	map.put("bus", "yellow");
    	map.put("potato", "brown");
    	map.put("kiwi", "green");
    	map.put("lemon", "yellow");
    	map.put("mango", "orange");
    	map.put("grape","purple");
    }
    static public void learn(String key, String value) {
        map.put(key, value);
    }
    
    static public void forget(String key) {
        // in order to keep objects whose value (color) has been 'forgotten', set
        // the value (color) to null instead of removing the object from the map entirely
        // note that this means that any time a value is checked, it first needs to be
        // protected against a null reference
    	//map.remove(key);
        map.put(key, null);
    }
    
    static public void recall(String key) {
        // first check if key exists if so print it otherwise print unknown
        if(map.get(key) != null) {
            System.out.println("Color of " + key + " is " + map.get(key));
        }
        else {
            System.out.println("Color of " + key + " is unknown.");
        }
    }
    
    static public void listObjectsByColor(String color) {
        // In the HashMap, objects are keys and colors are values
        // create an empty ArrayList of objects, then iterate through all
        // keys (objects) in the map and look up the color (value) of each
        // key (object).  If the color (value) matches the desired color,
        // add it to the objects list
        ArrayList<String> objects = new ArrayList();
        for(Object o : map.keySet()) {
            String key = (String)o;
            if(color.equals(map.get(key))) {
                objects.add(key);
            }
        }
        System.out.print(objects.size() + " " + color + " objects: ");
        for(String s : objects) {
            System.out.print(s + " ");
        }
        System.out.println();
    }
    
    static public void listAllObjects() {
        // iterate through the set of keys (objects) and print each object
       // Set<String>keySet = map.keySet();
        //System.out.println(keySet.size() + " objects: " + keySet.toString());
    	
    	
    	System.out.print(map.keySet().size() + " objects: ");
        for(Object o : map.keySet()) {
            String key = (String)o;
            System.out.print(key + " ");
        }      
        System.out.println();
    }
    
    static public void listAllColors() {
        // iterate through the set of keys (objects) and get the value (color)
        // of each key (object).  If it is a new color, add it to the colors
        // ArrayList, and if it's not, don't add it so we don't have duplicates
        ArrayList<String> colors = new ArrayList();
        for(Object o : map.keySet()) {
            String key = (String)o;
            if(map.get(key) != null) {
                String color = (String)map.get(key);
                if(!colors.contains(color)) {
                    colors.add(color);
                }
            }
        }
        System.out.print(colors.size() + " colors: ");
        for(String s : colors) {
            System.out.print(s + " ");
        }
        System.out.println();        
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        init();
    	String input;
        String[] input_components;
        Scanner scanner = new Scanner(System.in);
        do {
            System.out.print("Instruction: ");
            input = scanner.nextLine();
            input_components = input.split(" ");
            if(input.charAt(0) == 'l') {
                if(input_components.length == 3) {
                    learn(input_components[1], input_components[2]);
                }
            }
            else if(input.charAt(0) == 'f') {
                if(input_components.length == 2) {
                    forget(input_components[1]);
                }
            }
            else if(input.charAt(0) == 'r') {
                if(input_components.length == 2) {
                    recall(input_components[1]);
                }
            }
            else if(input.charAt(0) == 'w') {
                if(input_components.length == 2) {
                    listObjectsByColor(input_components[1]); 
                }
            }
            else if(input.charAt(0) == 'o') {
                if(input_components.length == 1) {
                    listAllObjects();
                }
            }            
            else if(input.charAt(0) == 'c') {
                if(input_components.length == 1) {
                    listAllColors();
                }
            }            
            else if(input.equals("q")){
       	 System.out.println("Bye");
       	 System.exit(0);
        }
    
        } while(!input.equals("q"));
    
    }
    
    
}

